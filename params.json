{"name":"Twitter-text-py","tagline":"a python port of http://github.com/mzsanford/twitter-text-rb/  also available via `easy_install twitter_text`","body":"A port of the Ruby gem [twitter-text-rb](http://github.com/mzsanford/twitter-text-rb) to Python.\r\n\r\n# Usage\r\n\r\nYou can either call a new TwitterText object with the text of the tweet you want to process `TwitterText('twitter-text-py is #awesome')` or use any of the submodule objects directly (Autolink, Extractor, HitHighlighter or Validation), passing in the tweet text as an argument.\r\n\r\nThe library also contains a Django template filter that applies the auto_link method to the passed in text. It can also optionally apply the hit_highlight method. Example:\r\n\r\n    {% load twitterize %}\r\n\r\n    {{ obj.body|twitter_text }} <!-- just add the links -->\r\n    {{ obj.body|twitter_text:\"my term\" }} <!-- add the links and highlight the search term -->\r\n\r\nYou can test that the library is working correctly by running `python tests.py` inside the `twitter_text` directory.\r\n\r\n## TwitterText(text)\r\n\r\n### Properties:\r\n\r\n* text:             the original text you passed in, or the modified version if you've called any functions on the object.\r\n* original_text:    the original text you passed in; never modified. Useful for a fallback or to do comparisons.\r\n* has_been_linked:  boolean denoting if any of the Autolink functions have been called. (Mostly for internal use.)\r\n* tweet_length:     the value returned by `validation.tweet_length` or None if that function has not yet been called.\r\n* tweet_is_valid:   boolean returned by `validation.tweet_invalid` or None if that function has not yet been called.\r\n* validation_error: the validation error string returned by `validation.tweet_invalid` or None if that function has not yet been called.\r\n* autolink:         property pointing to an Autolink object initialized with `text`\r\n* extractor:        property pointing to an Extractor object initialized with `text`\r\n* highlighter:      property pointing to a HitHighlighter object initialized with `text`\r\n* validation:       property pointing to a Validation object initialized with `text`\r\n\r\n## Autolink(text)\r\n\r\nThis object modifies the text passed to it (and the parent TwitterText.text if present).\r\n\r\n### Defaults\r\n\r\nThese may be overridden by kwargs on a particular method.\r\n\r\n* url_class         =   'tweet-url'\r\n* list_class        =   'list-slug'\r\n* username_class    =   'username'\r\n* hashtag_class     =   'hashtag'\r\n\r\n### Methods:\r\n\r\n__auto_link(self, **kwargs)__\r\n\r\nAdd `<a></a>` tags around the usernames, lists, hashtags and URLs in the provided text. The `<a>` tags can be controlled with the following kwargs:\r\n\r\n* url_class:            class to add to all `<a>` tags\r\n* list_class:           class to add to list `<a>` tags\r\n* username_class:       class to add to username `<a>` tags\r\n* hashtag_class:        class to add to hashtag `<a>` tags\r\n* username_url_base:    the value for href attribute on username links. The @username (minus the @) will be appended at the end of this.\r\n* list_url_base:        the value for href attribute on list links. The @username/list (minus the @) will be appended at the end of this.\r\n* hashtag_url_base:     the value for href attribute on hashtag links. The #hashtag (minus the #) will be appended at the end of this.\r\n* suppress_lists:       disable auto-linking to lists\r\n* suppress_no_follow:   do not add rel=\"nofollow\" to auto-linked items\r\n* html_attrs:           a dictionary of HTML attributes to add to non-Twitter links\r\n\r\n__auto_link_usernames_or_lists(self, **kwargs)__\r\n\r\nAdd `<a></a>` tags around the usernames and lists in the provided text. The `<a>` tags can be controlled with the following kwargs:\r\n\r\n* url_class:            class to add to all `<a>` tags\r\n* list_class:           class to add to list `<a>` tags\r\n* username_class:       class to add to username `<a>` tags\r\n* username_url_base:    the value for href attribute on username links. The @username (minus the @) will be appended at the end of this.\r\n* list_url_base:        the value for href attribute on list links. The @username/list (minus the @) will be appended at the end of this.\r\n* suppress_lists:       disable auto-linking to lists\r\n* suppress_no_follow:   do not add rel=\"nofollow\" to auto-linked items\r\n\r\n__auto_link_hashtags(self, **kwargs)__\r\n\r\nAdd `<a></a>` tags around the hashtags in the provided text. The `<a>` tags can be controlled with the following kwargs:\r\n\r\n* url_class:            class to add to all `<a>` tags\r\n* hashtag_class:        class to add to hashtag `<a>` tags\r\n* hashtag_url_base:     the value for href attribute. The hashtag text (minus the #) will be appended at the end of this.\r\n* suppress_no_follow:   do not add rel=\"nofollow\" to auto-linked items\r\n\r\n__auto_link_urls_custom(self, **kwargs)__\r\n\r\nAdd `<a></a>` tags around the URLs in the provided text. Any elements in kwargs (except @supress_no_follow@) will be converted to HTML attributes and place in the `<a>` tag. Unless kwargs contains @suppress_no_follow@ the rel=\"nofollow\" attribute will be added.\r\n\r\n## Extractor\r\n\r\nThis object does not modify the text passed to it (or the parent TwitterText.text if present).\r\n\r\n### Methods\r\n\r\n__extract_mentioned_screen_names__\r\n\r\nExtracts a list of all usernames mentioned in the Tweet text. If the text contains no username mentions an empty list will be returned.\r\n\r\nIf a transform is given, then it will be called with each username.\r\n\r\n__extract_mentioned_screen_names_with_indices__\r\n\r\nExtracts a list of all usernames mentioned in the Tweet text along with the indices for where the mention occurred in the format:\r\n\r\n    {\r\n        'username': username_string,\r\n        'indicies': ( start_postion, end_position )\r\n    }\r\n\r\nIf the text contains no username mentions, an empty list will be returned.\r\n\r\nIf a transform is given, then it will be called with each username, the start index, and the end index in the text.\r\n\r\n__extract_reply_screen_name__\r\n\r\nExtracts the first username replied to in the Tweet text. If the text does not contain a reply None will be returned.\r\n\r\nIf a transform is given then it will be called with the username replied to (if any).\r\n\r\n__extract_urls__\r\n\r\nExtracts a list of all URLs included in the Tweet text. If the text contains no URLs an empty list will be returned.\r\n\r\nIf a transform is given then it will be called for each URL.\r\n\r\n__extract_urls_with_indices__\r\n\r\nExtracts a list of all URLs included in the Tweet text along with the indices in the format:\r\n\r\n    {\r\n        'url': url_string,\r\n        'indices': ( start_postion, end_position )\r\n    }\r\n\r\nIf the text contains no URLs an empty list will be returned.\r\n\r\nIf a transform is given then it will be called for each URL, the start index, and the end index in the text.\r\n\r\n__extract_hashtags__\r\n\r\nExtracts a list of all hashtags included in the Tweet text. If the text contains no hashtags an empty list will be returned. The list returned will not include the leading # character.\r\n\r\nIf a transform is given then it will be called for each hashtag.\r\n\r\n__extract_hashtags_with_indices__\r\n\r\nExtracts a list of all hashtags included in the Tweet text along with the indices in the format:\r\n\r\n    {\r\n        'hashtag': hashtag_text,\r\n        'indices': ( start_postion, end_position )\r\n    }\r\n\r\nIf the text contains no hashtags an empty list will be returned. The list returned will not include the leading # character.\r\n\r\nIf a transform is given then it will be called for each hashtag.\r\n\r\n## HitHighlighter\r\n\r\n### Defaults\r\n\r\nThese may be overridden by kwargs on a particular method.\r\n\r\n* highlight_tag = 'em'\r\n* highlight_class = 'search-hit'\r\n\r\n### Methods\r\n\r\n__hit_highlight(self, query, **kwargs)__\r\n\r\nAdd `<em></em>` tags around occurrences of query provided in the text except for occurrences inside hashtags.\r\n\r\nThe `<em></em>` tags or css class can be overridden using the highlight_tag and/or highlight_class kwarg. For example:\r\n\r\n    python> HitHighlighter.hit_highlight('test hit here').hit_highlight('hit', highlight_tag = 'strong', highlight_class = 'search-term')\r\n            =\\> \"test <strong class='search-term'>hit</strong> here\"\r\n\r\n\r\n## Validation\r\n\r\n### Methods\r\n\r\n__tweet_length__\r\n\r\nReturns the length of the string as it would be displayed. This is equivilent to the length of the Unicode NFC (See: http://www.unicode.org/reports/tr15). This is needed in order to consistently calculate the length of a string no matter which actual form was transmitted. For example:\r\n\r\n    U+0065 Latin Small Letter E\r\n    + U+0301 Combining Acute Accent\r\n    ----------\r\n    = 2 bytes, 2 characters, displayed as Ã© (1 visual glyph)\r\n\r\nThe NFC of {U+0065, U+0301} is {U+00E9}, which is a single character and a display length of 1\r\n\r\nThe string could also contain U+00E9 already, in which case the canonicalization will not change the value.\r\n\r\n__tweet_invalid__\r\n\r\nCheck the text for any reason that it may not be valid as a Tweet. This is meant as a pre-validation before posting to api.twitter.com. There are several server-side reasons for Tweets to fail but this pre-validation will allow quicker feedback.\r\n\r\nReturns false if this text is valid. Otherwise one of the following Symbols will be returned:\r\n\r\n* \"Too long\": if the text is too long\r\n* \"Empty text\": if the text is empty\r\n* \"Invalid characters\": if the text contains non-Unicode or any of the disallowed Unicode characters\r\n","google":"UA-3625251-4","note":"Don't delete this file! It's used internally to help with page regeneration."}